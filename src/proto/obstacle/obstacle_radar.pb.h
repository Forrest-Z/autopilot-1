// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle_radar.proto

#ifndef PROTOBUF_obstacle_5fradar_2eproto__INCLUDED
#define PROTOBUF_obstacle_5fradar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "geometry.pb.h"
#include "error_code.pb.h"
// @@protoc_insertion_point(includes)
namespace usv {
namespace perception {
class PerceptionObstacle;
class PerceptionObstacleDefaultTypeInternal;
extern PerceptionObstacleDefaultTypeInternal _PerceptionObstacle_default_instance_;
class PerceptionObstacles;
class PerceptionObstaclesDefaultTypeInternal;
extern PerceptionObstaclesDefaultTypeInternal _PerceptionObstacles_default_instance_;
class Shape;
class ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
}  // namespace perception
}  // namespace usv

namespace usv {
namespace perception {

namespace protobuf_obstacle_5fradar_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_obstacle_5fradar_2eproto

enum Shape_ShapeType {
  Shape_ShapeType_CIRCLE = 0,
  Shape_ShapeType_RECTANGLE = 1,
  Shape_ShapeType_POLYGON = 2
};
bool Shape_ShapeType_IsValid(int value);
const Shape_ShapeType Shape_ShapeType_ShapeType_MIN = Shape_ShapeType_CIRCLE;
const Shape_ShapeType Shape_ShapeType_ShapeType_MAX = Shape_ShapeType_POLYGON;
const int Shape_ShapeType_ShapeType_ARRAYSIZE = Shape_ShapeType_ShapeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Shape_ShapeType_descriptor();
inline const ::std::string& Shape_ShapeType_Name(Shape_ShapeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Shape_ShapeType_descriptor(), value);
}
inline bool Shape_ShapeType_Parse(
    const ::std::string& name, Shape_ShapeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Shape_ShapeType>(
    Shape_ShapeType_descriptor(), name, value);
}
// ===================================================================

class Shape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:usv.perception.Shape) */ {
 public:
  Shape();
  virtual ~Shape();

  Shape(const Shape& from);

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Shape(Shape&& from) noexcept
    : Shape() {
    *this = ::std::move(from);
  }

  inline Shape& operator=(Shape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Shape& default_instance();

  static inline const Shape* internal_default_instance() {
    return reinterpret_cast<const Shape*>(
               &_Shape_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Shape* other);
  friend void swap(Shape& a, Shape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Shape* New() const PROTOBUF_FINAL { return New(NULL); }

  Shape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Shape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Shape_ShapeType ShapeType;
  static const ShapeType CIRCLE =
    Shape_ShapeType_CIRCLE;
  static const ShapeType RECTANGLE =
    Shape_ShapeType_RECTANGLE;
  static const ShapeType POLYGON =
    Shape_ShapeType_POLYGON;
  static inline bool ShapeType_IsValid(int value) {
    return Shape_ShapeType_IsValid(value);
  }
  static const ShapeType ShapeType_MIN =
    Shape_ShapeType_ShapeType_MIN;
  static const ShapeType ShapeType_MAX =
    Shape_ShapeType_ShapeType_MAX;
  static const int ShapeType_ARRAYSIZE =
    Shape_ShapeType_ShapeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ShapeType_descriptor() {
    return Shape_ShapeType_descriptor();
  }
  static inline const ::std::string& ShapeType_Name(ShapeType value) {
    return Shape_ShapeType_Name(value);
  }
  static inline bool ShapeType_Parse(const ::std::string& name,
      ShapeType* value) {
    return Shape_ShapeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .usv.common.Point2D poly = 4;
  int poly_size() const;
  void clear_poly();
  static const int kPolyFieldNumber = 4;
  const ::usv::common::Point2D& poly(int index) const;
  ::usv::common::Point2D* mutable_poly(int index);
  ::usv::common::Point2D* add_poly();
  ::google::protobuf::RepeatedPtrField< ::usv::common::Point2D >*
      mutable_poly();
  const ::google::protobuf::RepeatedPtrField< ::usv::common::Point2D >&
      poly() const;

  // optional .usv.common.Point2D rect = 3;
  bool has_rect() const;
  void clear_rect();
  static const int kRectFieldNumber = 3;
  const ::usv::common::Point2D& rect() const;
  ::usv::common::Point2D* mutable_rect();
  ::usv::common::Point2D* release_rect();
  void set_allocated_rect(::usv::common::Point2D* rect);

  // optional double radius = 2;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 2;
  double radius() const;
  void set_radius(double value);

  // optional .usv.perception.Shape.ShapeType type = 1 [default = CIRCLE];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::usv::perception::Shape_ShapeType type() const;
  void set_type(::usv::perception::Shape_ShapeType value);

  // @@protoc_insertion_point(class_scope:usv.perception.Shape)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_radius();
  void clear_has_radius();
  void set_has_rect();
  void clear_has_rect();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::usv::common::Point2D > poly_;
  ::usv::common::Point2D* rect_;
  double radius_;
  int type_;
  friend struct protobuf_obstacle_5fradar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PerceptionObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:usv.perception.PerceptionObstacle) */ {
 public:
  PerceptionObstacle();
  virtual ~PerceptionObstacle();

  PerceptionObstacle(const PerceptionObstacle& from);

  inline PerceptionObstacle& operator=(const PerceptionObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerceptionObstacle(PerceptionObstacle&& from) noexcept
    : PerceptionObstacle() {
    *this = ::std::move(from);
  }

  inline PerceptionObstacle& operator=(PerceptionObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionObstacle& default_instance();

  static inline const PerceptionObstacle* internal_default_instance() {
    return reinterpret_cast<const PerceptionObstacle*>(
               &_PerceptionObstacle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PerceptionObstacle* other);
  friend void swap(PerceptionObstacle& a, PerceptionObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerceptionObstacle* New() const PROTOBUF_FINAL { return New(NULL); }

  PerceptionObstacle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PerceptionObstacle& from);
  void MergeFrom(const PerceptionObstacle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PerceptionObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .usv.common.PointLLH positon = 2;
  bool has_positon() const;
  void clear_positon();
  static const int kPositonFieldNumber = 2;
  const ::usv::common::PointLLH& positon() const;
  ::usv::common::PointLLH* mutable_positon();
  ::usv::common::PointLLH* release_positon();
  void set_allocated_positon(::usv::common::PointLLH* positon);

  // optional .usv.perception.Shape shape = 3;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 3;
  const ::usv::perception::Shape& shape() const;
  ::usv::perception::Shape* mutable_shape();
  ::usv::perception::Shape* release_shape();
  void set_allocated_shape(::usv::perception::Shape* shape);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:usv.perception.PerceptionObstacle)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_positon();
  void clear_has_positon();
  void set_has_shape();
  void clear_has_shape();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::usv::common::PointLLH* positon_;
  ::usv::perception::Shape* shape_;
  ::google::protobuf::int32 id_;
  friend struct protobuf_obstacle_5fradar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PerceptionObstacles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:usv.perception.PerceptionObstacles) */ {
 public:
  PerceptionObstacles();
  virtual ~PerceptionObstacles();

  PerceptionObstacles(const PerceptionObstacles& from);

  inline PerceptionObstacles& operator=(const PerceptionObstacles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerceptionObstacles(PerceptionObstacles&& from) noexcept
    : PerceptionObstacles() {
    *this = ::std::move(from);
  }

  inline PerceptionObstacles& operator=(PerceptionObstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionObstacles& default_instance();

  static inline const PerceptionObstacles* internal_default_instance() {
    return reinterpret_cast<const PerceptionObstacles*>(
               &_PerceptionObstacles_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PerceptionObstacles* other);
  friend void swap(PerceptionObstacles& a, PerceptionObstacles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerceptionObstacles* New() const PROTOBUF_FINAL { return New(NULL); }

  PerceptionObstacles* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PerceptionObstacles& from);
  void MergeFrom(const PerceptionObstacles& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PerceptionObstacles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .usv.perception.PerceptionObstacle perception_obstacle = 1;
  int perception_obstacle_size() const;
  void clear_perception_obstacle();
  static const int kPerceptionObstacleFieldNumber = 1;
  const ::usv::perception::PerceptionObstacle& perception_obstacle(int index) const;
  ::usv::perception::PerceptionObstacle* mutable_perception_obstacle(int index);
  ::usv::perception::PerceptionObstacle* add_perception_obstacle();
  ::google::protobuf::RepeatedPtrField< ::usv::perception::PerceptionObstacle >*
      mutable_perception_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::usv::perception::PerceptionObstacle >&
      perception_obstacle() const;

  // optional .usv.common.Header header = 2;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 2;
  const ::usv::common::Header& header() const;
  ::usv::common::Header* mutable_header();
  ::usv::common::Header* release_header();
  void set_allocated_header(::usv::common::Header* header);

  // optional .usv.common.ErrorCode error_code = 3 [default = OK];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::usv::common::ErrorCode error_code() const;
  void set_error_code(::usv::common::ErrorCode value);

  // @@protoc_insertion_point(class_scope:usv.perception.PerceptionObstacles)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_error_code();
  void clear_has_error_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::usv::perception::PerceptionObstacle > perception_obstacle_;
  ::usv::common::Header* header_;
  int error_code_;
  friend struct protobuf_obstacle_5fradar_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shape

// optional .usv.perception.Shape.ShapeType type = 1 [default = CIRCLE];
inline bool Shape::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Shape::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Shape::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Shape::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::usv::perception::Shape_ShapeType Shape::type() const {
  // @@protoc_insertion_point(field_get:usv.perception.Shape.type)
  return static_cast< ::usv::perception::Shape_ShapeType >(type_);
}
inline void Shape::set_type(::usv::perception::Shape_ShapeType value) {
  assert(::usv::perception::Shape_ShapeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:usv.perception.Shape.type)
}

// optional double radius = 2;
inline bool Shape::has_radius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Shape::set_has_radius() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Shape::clear_has_radius() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Shape::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double Shape::radius() const {
  // @@protoc_insertion_point(field_get:usv.perception.Shape.radius)
  return radius_;
}
inline void Shape::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:usv.perception.Shape.radius)
}

// optional .usv.common.Point2D rect = 3;
inline bool Shape::has_rect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Shape::set_has_rect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Shape::clear_has_rect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Shape::clear_rect() {
  if (rect_ != NULL) rect_->::usv::common::Point2D::Clear();
  clear_has_rect();
}
inline const ::usv::common::Point2D& Shape::rect() const {
  const ::usv::common::Point2D* p = rect_;
  // @@protoc_insertion_point(field_get:usv.perception.Shape.rect)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::common::Point2D*>(
      &::usv::common::_Point2D_default_instance_);
}
inline ::usv::common::Point2D* Shape::mutable_rect() {
  set_has_rect();
  if (rect_ == NULL) {
    rect_ = new ::usv::common::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:usv.perception.Shape.rect)
  return rect_;
}
inline ::usv::common::Point2D* Shape::release_rect() {
  // @@protoc_insertion_point(field_release:usv.perception.Shape.rect)
  clear_has_rect();
  ::usv::common::Point2D* temp = rect_;
  rect_ = NULL;
  return temp;
}
inline void Shape::set_allocated_rect(::usv::common::Point2D* rect) {
  delete rect_;
  rect_ = rect;
  if (rect) {
    set_has_rect();
  } else {
    clear_has_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.perception.Shape.rect)
}

// repeated .usv.common.Point2D poly = 4;
inline int Shape::poly_size() const {
  return poly_.size();
}
inline void Shape::clear_poly() {
  poly_.Clear();
}
inline const ::usv::common::Point2D& Shape::poly(int index) const {
  // @@protoc_insertion_point(field_get:usv.perception.Shape.poly)
  return poly_.Get(index);
}
inline ::usv::common::Point2D* Shape::mutable_poly(int index) {
  // @@protoc_insertion_point(field_mutable:usv.perception.Shape.poly)
  return poly_.Mutable(index);
}
inline ::usv::common::Point2D* Shape::add_poly() {
  // @@protoc_insertion_point(field_add:usv.perception.Shape.poly)
  return poly_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::usv::common::Point2D >*
Shape::mutable_poly() {
  // @@protoc_insertion_point(field_mutable_list:usv.perception.Shape.poly)
  return &poly_;
}
inline const ::google::protobuf::RepeatedPtrField< ::usv::common::Point2D >&
Shape::poly() const {
  // @@protoc_insertion_point(field_list:usv.perception.Shape.poly)
  return poly_;
}

// -------------------------------------------------------------------

// PerceptionObstacle

// optional int32 id = 1;
inline bool PerceptionObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PerceptionObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PerceptionObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PerceptionObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:usv.perception.PerceptionObstacle.id)
  return id_;
}
inline void PerceptionObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:usv.perception.PerceptionObstacle.id)
}

// optional .usv.common.PointLLH positon = 2;
inline bool PerceptionObstacle::has_positon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerceptionObstacle::set_has_positon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerceptionObstacle::clear_has_positon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerceptionObstacle::clear_positon() {
  if (positon_ != NULL) positon_->::usv::common::PointLLH::Clear();
  clear_has_positon();
}
inline const ::usv::common::PointLLH& PerceptionObstacle::positon() const {
  const ::usv::common::PointLLH* p = positon_;
  // @@protoc_insertion_point(field_get:usv.perception.PerceptionObstacle.positon)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::common::PointLLH*>(
      &::usv::common::_PointLLH_default_instance_);
}
inline ::usv::common::PointLLH* PerceptionObstacle::mutable_positon() {
  set_has_positon();
  if (positon_ == NULL) {
    positon_ = new ::usv::common::PointLLH;
  }
  // @@protoc_insertion_point(field_mutable:usv.perception.PerceptionObstacle.positon)
  return positon_;
}
inline ::usv::common::PointLLH* PerceptionObstacle::release_positon() {
  // @@protoc_insertion_point(field_release:usv.perception.PerceptionObstacle.positon)
  clear_has_positon();
  ::usv::common::PointLLH* temp = positon_;
  positon_ = NULL;
  return temp;
}
inline void PerceptionObstacle::set_allocated_positon(::usv::common::PointLLH* positon) {
  delete positon_;
  positon_ = positon;
  if (positon) {
    set_has_positon();
  } else {
    clear_has_positon();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.perception.PerceptionObstacle.positon)
}

// optional .usv.perception.Shape shape = 3;
inline bool PerceptionObstacle::has_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerceptionObstacle::set_has_shape() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerceptionObstacle::clear_has_shape() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerceptionObstacle::clear_shape() {
  if (shape_ != NULL) shape_->::usv::perception::Shape::Clear();
  clear_has_shape();
}
inline const ::usv::perception::Shape& PerceptionObstacle::shape() const {
  const ::usv::perception::Shape* p = shape_;
  // @@protoc_insertion_point(field_get:usv.perception.PerceptionObstacle.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::perception::Shape*>(
      &::usv::perception::_Shape_default_instance_);
}
inline ::usv::perception::Shape* PerceptionObstacle::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::usv::perception::Shape;
  }
  // @@protoc_insertion_point(field_mutable:usv.perception.PerceptionObstacle.shape)
  return shape_;
}
inline ::usv::perception::Shape* PerceptionObstacle::release_shape() {
  // @@protoc_insertion_point(field_release:usv.perception.PerceptionObstacle.shape)
  clear_has_shape();
  ::usv::perception::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void PerceptionObstacle::set_allocated_shape(::usv::perception::Shape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.perception.PerceptionObstacle.shape)
}

// -------------------------------------------------------------------

// PerceptionObstacles

// repeated .usv.perception.PerceptionObstacle perception_obstacle = 1;
inline int PerceptionObstacles::perception_obstacle_size() const {
  return perception_obstacle_.size();
}
inline void PerceptionObstacles::clear_perception_obstacle() {
  perception_obstacle_.Clear();
}
inline const ::usv::perception::PerceptionObstacle& PerceptionObstacles::perception_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:usv.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Get(index);
}
inline ::usv::perception::PerceptionObstacle* PerceptionObstacles::mutable_perception_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:usv.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Mutable(index);
}
inline ::usv::perception::PerceptionObstacle* PerceptionObstacles::add_perception_obstacle() {
  // @@protoc_insertion_point(field_add:usv.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::usv::perception::PerceptionObstacle >*
PerceptionObstacles::mutable_perception_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:usv.perception.PerceptionObstacles.perception_obstacle)
  return &perception_obstacle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::usv::perception::PerceptionObstacle >&
PerceptionObstacles::perception_obstacle() const {
  // @@protoc_insertion_point(field_list:usv.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_;
}

// optional .usv.common.Header header = 2;
inline bool PerceptionObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerceptionObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerceptionObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerceptionObstacles::clear_header() {
  if (header_ != NULL) header_->::usv::common::Header::Clear();
  clear_has_header();
}
inline const ::usv::common::Header& PerceptionObstacles::header() const {
  const ::usv::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:usv.perception.PerceptionObstacles.header)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::common::Header*>(
      &::usv::common::_Header_default_instance_);
}
inline ::usv::common::Header* PerceptionObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::usv::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:usv.perception.PerceptionObstacles.header)
  return header_;
}
inline ::usv::common::Header* PerceptionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:usv.perception.PerceptionObstacles.header)
  clear_has_header();
  ::usv::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PerceptionObstacles::set_allocated_header(::usv::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.perception.PerceptionObstacles.header)
}

// optional .usv.common.ErrorCode error_code = 3 [default = OK];
inline bool PerceptionObstacles::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PerceptionObstacles::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PerceptionObstacles::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PerceptionObstacles::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::usv::common::ErrorCode PerceptionObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:usv.perception.PerceptionObstacles.error_code)
  return static_cast< ::usv::common::ErrorCode >(error_code_);
}
inline void PerceptionObstacles::set_error_code(::usv::common::ErrorCode value) {
  assert(::usv::common::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:usv.perception.PerceptionObstacles.error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace perception
}  // namespace usv

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::usv::perception::Shape_ShapeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::usv::perception::Shape_ShapeType>() {
  return ::usv::perception::Shape_ShapeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_obstacle_5fradar_2eproto__INCLUDED
