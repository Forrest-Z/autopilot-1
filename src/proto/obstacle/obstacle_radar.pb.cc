// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle_radar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stdafx.h"
#include "obstacle_radar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace usv {
namespace perception {
class ShapeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Shape>
     _instance;
} _Shape_default_instance_;
class PerceptionObstacleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PerceptionObstacle>
     _instance;
} _PerceptionObstacle_default_instance_;
class PerceptionObstaclesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PerceptionObstacles>
     _instance;
} _PerceptionObstacles_default_instance_;

namespace protobuf_obstacle_5fradar_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, rect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shape, poly_),
  2,
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, positon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacle, shape_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, perception_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptionObstacles, error_code_),
  ~0u,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(Shape)},
  { 13, 21, sizeof(PerceptionObstacle)},
  { 24, 32, sizeof(PerceptionObstacles)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Shape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PerceptionObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PerceptionObstacles_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "obstacle_radar.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::usv::common::protobuf_header_2eproto::InitDefaults();
  ::usv::common::protobuf_geometry_2eproto::InitDefaults();
  ::usv::common::protobuf_error_5fcode_2eproto::InitDefaults();
  _Shape_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Shape_default_instance_);_PerceptionObstacle_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PerceptionObstacle_default_instance_);_PerceptionObstacles_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PerceptionObstacles_default_instance_);_Shape_default_instance_._instance.get_mutable()->rect_ = const_cast< ::usv::common::Point2D*>(
      ::usv::common::Point2D::internal_default_instance());
  _PerceptionObstacle_default_instance_._instance.get_mutable()->positon_ = const_cast< ::usv::common::PointLLH*>(
      ::usv::common::PointLLH::internal_default_instance());
  _PerceptionObstacle_default_instance_._instance.get_mutable()->shape_ = const_cast< ::usv::perception::Shape*>(
      ::usv::perception::Shape::internal_default_instance());
  _PerceptionObstacles_default_instance_._instance.get_mutable()->header_ = const_cast< ::usv::common::Header*>(
      ::usv::common::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024obstacle_radar.proto\022\016usv.perception\032\014"
      "header.proto\032\016geometry.proto\032\020error_code"
      ".proto\"\311\001\n\005Shape\0225\n\004type\030\001 \001(\0162\037.usv.per"
      "ception.Shape.ShapeType:\006CIRCLE\022\016\n\006radiu"
      "s\030\002 \001(\001\022!\n\004rect\030\003 \001(\0132\023.usv.common.Point"
      "2D\022!\n\004poly\030\004 \003(\0132\023.usv.common.Point2D\"3\n"
      "\tShapeType\022\n\n\006CIRCLE\020\000\022\r\n\tRECTANGLE\020\001\022\013\n"
      "\007POLYGON\020\002\"m\n\022PerceptionObstacle\022\n\n\002id\030\001"
      " \001(\005\022%\n\007positon\030\002 \001(\0132\024.usv.common.Point"
      "LLH\022$\n\005shape\030\003 \001(\0132\025.usv.perception.Shap"
      "e\"\251\001\n\023PerceptionObstacles\022\?\n\023perception_"
      "obstacle\030\001 \003(\0132\".usv.perception.Percepti"
      "onObstacle\022\"\n\006header\030\002 \001(\0132\022.usv.common."
      "Header\022-\n\nerror_code\030\003 \001(\0162\025.usv.common."
      "ErrorCode:\002OK"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 573);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "obstacle_radar.proto", &protobuf_RegisterTypes);
  ::usv::common::protobuf_header_2eproto::AddDescriptors();
  ::usv::common::protobuf_geometry_2eproto::AddDescriptors();
  ::usv::common::protobuf_error_5fcode_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_obstacle_5fradar_2eproto

const ::google::protobuf::EnumDescriptor* Shape_ShapeType_descriptor() {
  protobuf_obstacle_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5fradar_2eproto::file_level_enum_descriptors[0];
}
bool Shape_ShapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Shape_ShapeType Shape::CIRCLE;
const Shape_ShapeType Shape::RECTANGLE;
const Shape_ShapeType Shape::POLYGON;
const Shape_ShapeType Shape::ShapeType_MIN;
const Shape_ShapeType Shape::ShapeType_MAX;
const int Shape::ShapeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shape::kTypeFieldNumber;
const int Shape::kRadiusFieldNumber;
const int Shape::kRectFieldNumber;
const int Shape::kPolyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shape::Shape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_obstacle_5fradar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:usv.perception.Shape)
}
Shape::Shape(const Shape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      poly_(from.poly_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rect()) {
    rect_ = new ::usv::common::Point2D(*from.rect_);
  } else {
    rect_ = NULL;
  }
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:usv.perception.Shape)
}

void Shape::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&rect_)) + sizeof(type_));
}

Shape::~Shape() {
  // @@protoc_insertion_point(destructor:usv.perception.Shape)
  SharedDtor();
}

void Shape::SharedDtor() {
  if (this != internal_default_instance()) delete rect_;
}

void Shape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shape::descriptor() {
  protobuf_obstacle_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Shape& Shape::default_instance() {
  protobuf_obstacle_5fradar_2eproto::InitDefaults();
  return *internal_default_instance();
}

Shape* Shape::New(::google::protobuf::Arena* arena) const {
  Shape* n = new Shape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:usv.perception.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poly_.Clear();
  if (has_rect()) {
    GOOGLE_DCHECK(rect_ != NULL);
    rect_->::usv::common::Point2D::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Shape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:usv.perception.Shape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .usv.perception.Shape.ShapeType type = 1 [default = CIRCLE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::usv::perception::Shape_ShapeType_IsValid(value)) {
            set_type(static_cast< ::usv::perception::Shape_ShapeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radius = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usv.common.Point2D rect = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .usv.common.Point2D poly = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poly()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:usv.perception.Shape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:usv.perception.Shape)
  return false;
#undef DO_
}

void Shape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:usv.perception.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .usv.perception.Shape.ShapeType type = 1 [default = CIRCLE];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double radius = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radius(), output);
  }

  // optional .usv.common.Point2D rect = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rect_, output);
  }

  // repeated .usv.common.Point2D poly = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->poly_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->poly(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:usv.perception.Shape)
}

::google::protobuf::uint8* Shape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:usv.perception.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .usv.perception.Shape.ShapeType type = 1 [default = CIRCLE];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double radius = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radius(), target);
  }

  // optional .usv.common.Point2D rect = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rect_, deterministic, target);
  }

  // repeated .usv.common.Point2D poly = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->poly_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->poly(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usv.perception.Shape)
  return target;
}

size_t Shape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usv.perception.Shape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .usv.common.Point2D poly = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->poly_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poly(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .usv.common.Point2D rect = 3;
    if (has_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rect_);
    }

    // optional double radius = 2;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // optional .usv.perception.Shape.ShapeType type = 1 [default = CIRCLE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usv.perception.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  const Shape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usv.perception.Shape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usv.perception.Shape)
    MergeFrom(*source);
  }
}

void Shape::MergeFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usv.perception.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  poly_.MergeFrom(from.poly_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_rect()->::usv::common::Point2D::MergeFrom(from.rect());
    }
    if (cached_has_bits & 0x00000002u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Shape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usv.perception.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shape::CopyFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usv.perception.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shape::IsInitialized() const {
  return true;
}

void Shape::Swap(Shape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shape::InternalSwap(Shape* other) {
  using std::swap;
  poly_.InternalSwap(&other->poly_);
  swap(rect_, other->rect_);
  swap(radius_, other->radius_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Shape::GetMetadata() const {
  protobuf_obstacle_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Shape

// optional .usv.perception.Shape.ShapeType type = 1 [default = CIRCLE];
bool Shape::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Shape::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Shape::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Shape::clear_type() {
  type_ = 0;
  clear_has_type();
}
::usv::perception::Shape_ShapeType Shape::type() const {
  // @@protoc_insertion_point(field_get:usv.perception.Shape.type)
  return static_cast< ::usv::perception::Shape_ShapeType >(type_);
}
void Shape::set_type(::usv::perception::Shape_ShapeType value) {
  assert(::usv::perception::Shape_ShapeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:usv.perception.Shape.type)
}

// optional double radius = 2;
bool Shape::has_radius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Shape::set_has_radius() {
  _has_bits_[0] |= 0x00000002u;
}
void Shape::clear_has_radius() {
  _has_bits_[0] &= ~0x00000002u;
}
void Shape::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
double Shape::radius() const {
  // @@protoc_insertion_point(field_get:usv.perception.Shape.radius)
  return radius_;
}
void Shape::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:usv.perception.Shape.radius)
}

// optional .usv.common.Point2D rect = 3;
bool Shape::has_rect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Shape::set_has_rect() {
  _has_bits_[0] |= 0x00000001u;
}
void Shape::clear_has_rect() {
  _has_bits_[0] &= ~0x00000001u;
}
void Shape::clear_rect() {
  if (rect_ != NULL) rect_->::usv::common::Point2D::Clear();
  clear_has_rect();
}
const ::usv::common::Point2D& Shape::rect() const {
  const ::usv::common::Point2D* p = rect_;
  // @@protoc_insertion_point(field_get:usv.perception.Shape.rect)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::common::Point2D*>(
      &::usv::common::_Point2D_default_instance_);
}
::usv::common::Point2D* Shape::mutable_rect() {
  set_has_rect();
  if (rect_ == NULL) {
    rect_ = new ::usv::common::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:usv.perception.Shape.rect)
  return rect_;
}
::usv::common::Point2D* Shape::release_rect() {
  // @@protoc_insertion_point(field_release:usv.perception.Shape.rect)
  clear_has_rect();
  ::usv::common::Point2D* temp = rect_;
  rect_ = NULL;
  return temp;
}
void Shape::set_allocated_rect(::usv::common::Point2D* rect) {
  delete rect_;
  rect_ = rect;
  if (rect) {
    set_has_rect();
  } else {
    clear_has_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.perception.Shape.rect)
}

// repeated .usv.common.Point2D poly = 4;
int Shape::poly_size() const {
  return poly_.size();
}
void Shape::clear_poly() {
  poly_.Clear();
}
const ::usv::common::Point2D& Shape::poly(int index) const {
  // @@protoc_insertion_point(field_get:usv.perception.Shape.poly)
  return poly_.Get(index);
}
::usv::common::Point2D* Shape::mutable_poly(int index) {
  // @@protoc_insertion_point(field_mutable:usv.perception.Shape.poly)
  return poly_.Mutable(index);
}
::usv::common::Point2D* Shape::add_poly() {
  // @@protoc_insertion_point(field_add:usv.perception.Shape.poly)
  return poly_.Add();
}
::google::protobuf::RepeatedPtrField< ::usv::common::Point2D >*
Shape::mutable_poly() {
  // @@protoc_insertion_point(field_mutable_list:usv.perception.Shape.poly)
  return &poly_;
}
const ::google::protobuf::RepeatedPtrField< ::usv::common::Point2D >&
Shape::poly() const {
  // @@protoc_insertion_point(field_list:usv.perception.Shape.poly)
  return poly_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacle::kIdFieldNumber;
const int PerceptionObstacle::kPositonFieldNumber;
const int PerceptionObstacle::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacle::PerceptionObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_obstacle_5fradar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:usv.perception.PerceptionObstacle)
}
PerceptionObstacle::PerceptionObstacle(const PerceptionObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_positon()) {
    positon_ = new ::usv::common::PointLLH(*from.positon_);
  } else {
    positon_ = NULL;
  }
  if (from.has_shape()) {
    shape_ = new ::usv::perception::Shape(*from.shape_);
  } else {
    shape_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:usv.perception.PerceptionObstacle)
}

void PerceptionObstacle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&positon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&positon_)) + sizeof(id_));
}

PerceptionObstacle::~PerceptionObstacle() {
  // @@protoc_insertion_point(destructor:usv.perception.PerceptionObstacle)
  SharedDtor();
}

void PerceptionObstacle::SharedDtor() {
  if (this != internal_default_instance()) delete positon_;
  if (this != internal_default_instance()) delete shape_;
}

void PerceptionObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionObstacle::descriptor() {
  protobuf_obstacle_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptionObstacle& PerceptionObstacle::default_instance() {
  protobuf_obstacle_5fradar_2eproto::InitDefaults();
  return *internal_default_instance();
}

PerceptionObstacle* PerceptionObstacle::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacle* n = new PerceptionObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:usv.perception.PerceptionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(positon_ != NULL);
      positon_->::usv::common::PointLLH::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shape_ != NULL);
      shape_->::usv::perception::Shape::Clear();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerceptionObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:usv.perception.PerceptionObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usv.common.PointLLH positon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usv.perception.Shape shape = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:usv.perception.PerceptionObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:usv.perception.PerceptionObstacle)
  return false;
#undef DO_
}

void PerceptionObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:usv.perception.PerceptionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .usv.common.PointLLH positon = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->positon_, output);
  }

  // optional .usv.perception.Shape shape = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->shape_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:usv.perception.PerceptionObstacle)
}

::google::protobuf::uint8* PerceptionObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:usv.perception.PerceptionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .usv.common.PointLLH positon = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->positon_, deterministic, target);
  }

  // optional .usv.perception.Shape shape = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->shape_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usv.perception.PerceptionObstacle)
  return target;
}

size_t PerceptionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usv.perception.PerceptionObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .usv.common.PointLLH positon = 2;
    if (has_positon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->positon_);
    }

    // optional .usv.perception.Shape shape = 3;
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shape_);
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usv.perception.PerceptionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usv.perception.PerceptionObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usv.perception.PerceptionObstacle)
    MergeFrom(*source);
  }
}

void PerceptionObstacle::MergeFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usv.perception.PerceptionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_positon()->::usv::common::PointLLH::MergeFrom(from.positon());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shape()->::usv::perception::Shape::MergeFrom(from.shape());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usv.perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacle::CopyFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usv.perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacle::IsInitialized() const {
  return true;
}

void PerceptionObstacle::Swap(PerceptionObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacle::InternalSwap(PerceptionObstacle* other) {
  using std::swap;
  swap(positon_, other->positon_);
  swap(shape_, other->shape_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionObstacle::GetMetadata() const {
  protobuf_obstacle_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacle

// optional int32 id = 1;
bool PerceptionObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerceptionObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void PerceptionObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:usv.perception.PerceptionObstacle.id)
  return id_;
}
void PerceptionObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:usv.perception.PerceptionObstacle.id)
}

// optional .usv.common.PointLLH positon = 2;
bool PerceptionObstacle::has_positon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerceptionObstacle::set_has_positon() {
  _has_bits_[0] |= 0x00000001u;
}
void PerceptionObstacle::clear_has_positon() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacle::clear_positon() {
  if (positon_ != NULL) positon_->::usv::common::PointLLH::Clear();
  clear_has_positon();
}
const ::usv::common::PointLLH& PerceptionObstacle::positon() const {
  const ::usv::common::PointLLH* p = positon_;
  // @@protoc_insertion_point(field_get:usv.perception.PerceptionObstacle.positon)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::common::PointLLH*>(
      &::usv::common::_PointLLH_default_instance_);
}
::usv::common::PointLLH* PerceptionObstacle::mutable_positon() {
  set_has_positon();
  if (positon_ == NULL) {
    positon_ = new ::usv::common::PointLLH;
  }
  // @@protoc_insertion_point(field_mutable:usv.perception.PerceptionObstacle.positon)
  return positon_;
}
::usv::common::PointLLH* PerceptionObstacle::release_positon() {
  // @@protoc_insertion_point(field_release:usv.perception.PerceptionObstacle.positon)
  clear_has_positon();
  ::usv::common::PointLLH* temp = positon_;
  positon_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_positon(::usv::common::PointLLH* positon) {
  delete positon_;
  positon_ = positon;
  if (positon) {
    set_has_positon();
  } else {
    clear_has_positon();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.perception.PerceptionObstacle.positon)
}

// optional .usv.perception.Shape shape = 3;
bool PerceptionObstacle::has_shape() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerceptionObstacle::set_has_shape() {
  _has_bits_[0] |= 0x00000002u;
}
void PerceptionObstacle::clear_has_shape() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacle::clear_shape() {
  if (shape_ != NULL) shape_->::usv::perception::Shape::Clear();
  clear_has_shape();
}
const ::usv::perception::Shape& PerceptionObstacle::shape() const {
  const ::usv::perception::Shape* p = shape_;
  // @@protoc_insertion_point(field_get:usv.perception.PerceptionObstacle.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::perception::Shape*>(
      &::usv::perception::_Shape_default_instance_);
}
::usv::perception::Shape* PerceptionObstacle::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::usv::perception::Shape;
  }
  // @@protoc_insertion_point(field_mutable:usv.perception.PerceptionObstacle.shape)
  return shape_;
}
::usv::perception::Shape* PerceptionObstacle::release_shape() {
  // @@protoc_insertion_point(field_release:usv.perception.PerceptionObstacle.shape)
  clear_has_shape();
  ::usv::perception::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_shape(::usv::perception::Shape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.perception.PerceptionObstacle.shape)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacles::kPerceptionObstacleFieldNumber;
const int PerceptionObstacles::kHeaderFieldNumber;
const int PerceptionObstacles::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacles::PerceptionObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_obstacle_5fradar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:usv.perception.PerceptionObstacles)
}
PerceptionObstacles::PerceptionObstacles(const PerceptionObstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      perception_obstacle_(from.perception_obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::usv::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:usv.perception.PerceptionObstacles)
}

void PerceptionObstacles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&header_)) + sizeof(error_code_));
}

PerceptionObstacles::~PerceptionObstacles() {
  // @@protoc_insertion_point(destructor:usv.perception.PerceptionObstacles)
  SharedDtor();
}

void PerceptionObstacles::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void PerceptionObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionObstacles::descriptor() {
  protobuf_obstacle_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptionObstacles& PerceptionObstacles::default_instance() {
  protobuf_obstacle_5fradar_2eproto::InitDefaults();
  return *internal_default_instance();
}

PerceptionObstacles* PerceptionObstacles::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacles* n = new PerceptionObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:usv.perception.PerceptionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perception_obstacle_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::usv::common::Header::Clear();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerceptionObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:usv.perception.PerceptionObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .usv.perception.PerceptionObstacle perception_obstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_perception_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usv.common.Header header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usv.common.ErrorCode error_code = 3 [default = OK];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::usv::common::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::usv::common::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:usv.perception.PerceptionObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:usv.perception.PerceptionObstacles)
  return false;
#undef DO_
}

void PerceptionObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:usv.perception.PerceptionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .usv.perception.PerceptionObstacle perception_obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perception_obstacle_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->perception_obstacle(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .usv.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->header_, output);
  }

  // optional .usv.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:usv.perception.PerceptionObstacles)
}

::google::protobuf::uint8* PerceptionObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:usv.perception.PerceptionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .usv.perception.PerceptionObstacle perception_obstacle = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perception_obstacle_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->perception_obstacle(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .usv.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->header_, deterministic, target);
  }

  // optional .usv.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usv.perception.PerceptionObstacles)
  return target;
}

size_t PerceptionObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usv.perception.PerceptionObstacles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .usv.perception.PerceptionObstacle perception_obstacle = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->perception_obstacle_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perception_obstacle(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .usv.common.Header header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .usv.common.ErrorCode error_code = 3 [default = OK];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usv.perception.PerceptionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionObstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usv.perception.PerceptionObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usv.perception.PerceptionObstacles)
    MergeFrom(*source);
  }
}

void PerceptionObstacles::MergeFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usv.perception.PerceptionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perception_obstacle_.MergeFrom(from.perception_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::usv::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usv.perception.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacles::CopyFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usv.perception.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacles::IsInitialized() const {
  return true;
}

void PerceptionObstacles::Swap(PerceptionObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacles::InternalSwap(PerceptionObstacles* other) {
  using std::swap;
  perception_obstacle_.InternalSwap(&other->perception_obstacle_);
  swap(header_, other->header_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionObstacles::GetMetadata() const {
  protobuf_obstacle_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacles

// repeated .usv.perception.PerceptionObstacle perception_obstacle = 1;
int PerceptionObstacles::perception_obstacle_size() const {
  return perception_obstacle_.size();
}
void PerceptionObstacles::clear_perception_obstacle() {
  perception_obstacle_.Clear();
}
const ::usv::perception::PerceptionObstacle& PerceptionObstacles::perception_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:usv.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Get(index);
}
::usv::perception::PerceptionObstacle* PerceptionObstacles::mutable_perception_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:usv.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Mutable(index);
}
::usv::perception::PerceptionObstacle* PerceptionObstacles::add_perception_obstacle() {
  // @@protoc_insertion_point(field_add:usv.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::usv::perception::PerceptionObstacle >*
PerceptionObstacles::mutable_perception_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:usv.perception.PerceptionObstacles.perception_obstacle)
  return &perception_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::usv::perception::PerceptionObstacle >&
PerceptionObstacles::perception_obstacle() const {
  // @@protoc_insertion_point(field_list:usv.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_;
}

// optional .usv.common.Header header = 2;
bool PerceptionObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerceptionObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void PerceptionObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacles::clear_header() {
  if (header_ != NULL) header_->::usv::common::Header::Clear();
  clear_has_header();
}
const ::usv::common::Header& PerceptionObstacles::header() const {
  const ::usv::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:usv.perception.PerceptionObstacles.header)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::common::Header*>(
      &::usv::common::_Header_default_instance_);
}
::usv::common::Header* PerceptionObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::usv::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:usv.perception.PerceptionObstacles.header)
  return header_;
}
::usv::common::Header* PerceptionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:usv.perception.PerceptionObstacles.header)
  clear_has_header();
  ::usv::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PerceptionObstacles::set_allocated_header(::usv::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.perception.PerceptionObstacles.header)
}

// optional .usv.common.ErrorCode error_code = 3 [default = OK];
bool PerceptionObstacles::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerceptionObstacles::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void PerceptionObstacles::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacles::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::usv::common::ErrorCode PerceptionObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:usv.perception.PerceptionObstacles.error_code)
  return static_cast< ::usv::common::ErrorCode >(error_code_);
}
void PerceptionObstacles::set_error_code(::usv::common::ErrorCode value) {
  assert(::usv::common::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:usv.perception.PerceptionObstacles.error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace usv

// @@protoc_insertion_point(global_scope)
