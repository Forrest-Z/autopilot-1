// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnss_un237.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stdafx.h"
#include "gnss_un237.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace usv {
namespace localization {
namespace gnss {
class InsStatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InsStat>
     _instance;
} _InsStat_default_instance_;
class InsTimeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InsTime>
     _instance;
} _InsTime_default_instance_;
class Ins_un237DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Ins_un237>
     _instance;
} _Ins_un237_default_instance_;

namespace protobuf_gnss_5fun237_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStat, locationstat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStat, directionfinderstat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStat, gpslocationstat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStat, using_satellite_num_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsTime, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsTime, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsTime, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsTime, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsTime, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsTime, minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsTime, second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsTime, second_decade_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, insstat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, instime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, postion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, motiondirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, rot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, heave_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_un237, roll_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(InsStat)},
  { 13, 25, sizeof(InsTime)},
  { 32, 48, sizeof(Ins_un237)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InsStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InsTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ins_un237_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gnss_un237.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::usv::common::protobuf_header_2eproto::InitDefaults();
  ::usv::common::protobuf_geometry_2eproto::InitDefaults();
  _InsStat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InsStat_default_instance_);_InsTime_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InsTime_default_instance_);_Ins_un237_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Ins_un237_default_instance_);_Ins_un237_default_instance_._instance.get_mutable()->header_ = const_cast< ::usv::common::Header*>(
      ::usv::common::Header::internal_default_instance());
  _Ins_un237_default_instance_._instance.get_mutable()->insstat_ = const_cast< ::usv::localization::gnss::InsStat*>(
      ::usv::localization::gnss::InsStat::internal_default_instance());
  _Ins_un237_default_instance_._instance.get_mutable()->instime_ = const_cast< ::usv::localization::gnss::InsTime*>(
      ::usv::localization::gnss::InsTime::internal_default_instance());
  _Ins_un237_default_instance_._instance.get_mutable()->postion_ = const_cast< ::usv::common::PointLLH*>(
      ::usv::common::PointLLH::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020gnss_un237.proto\022\025usv.localization.gns"
      "s\032\014header.proto\032\016geometry.proto\"\220\004\n\007InsS"
      "tat\022A\n\014locationStat\030\001 \001(\0162+.usv.localiza"
      "tion.gnss.InsStat.LocationStat\022O\n\023direct"
      "ionFinderStat\030\002 \001(\01622.usv.localization.g"
      "nss.InsStat.DirectionFinderStat\022G\n\017gpsLo"
      "cationStat\030\003 \001(\0162..usv.localization.gnss"
      ".InsStat.GPSLocationStat\022\033\n\023using_satell"
      "ite_num\030\004 \001(\005\"8\n\014LocationStat\022\022\n\016LOCATIO"
      "N_VALID\020\000\022\024\n\020LOCATION_INVALID\020\001\"@\n\023Direc"
      "tionFinderStat\022\023\n\017GPS_ORIENTATION\020\000\022\024\n\020G"
      "YRO_ORIENTATION\020\001\"\216\001\n\017GPSLocationStat\022\023\n"
      "\017GPS_NO_LOCATION\020\000\022\027\n\023GPS_SINGLE_LOCATIO"
      "N\020\001\022\025\n\021GPS_DIFF_LOCATION\020\002\022\032\n\026GPS_RTK_FI"
      "XED_LOCATION\020\003\022\032\n\026GPS_RTK_FLOAT_LOCATION"
      "\020\004\"y\n\007InsTime\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030\002 \001"
      "(\005\022\014\n\004date\030\003 \001(\005\022\014\n\004hour\030\004 \001(\005\022\016\n\006minute"
      "\030\005 \001(\005\022\016\n\006second\030\006 \001(\005\022\025\n\rsecond_decade\030"
      "\007 \001(\005\"\252\002\n\tIns_un237\022\"\n\006header\030\001 \001(\0132\022.us"
      "v.common.Header\022/\n\007insStat\030\002 \001(\0132\036.usv.l"
      "ocalization.gnss.InsStat\022/\n\007insTime\030\003 \001("
      "\0132\036.usv.localization.gnss.InsTime\022%\n\007pos"
      "tion\030\004 \001(\0132\024.usv.common.PointLLH\022\r\n\005spee"
      "d\030\005 \001(\001\022\017\n\007heading\030\006 \001(\001\022\027\n\017motionDirect"
      "ion\030\007 \001(\001\022\013\n\003rot\030\010 \001(\001\022\r\n\005heave\030\t \001(\001\022\r\n"
      "\005pitch\030\n \001(\001\022\014\n\004roll\030\013 \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1026);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gnss_un237.proto", &protobuf_RegisterTypes);
  ::usv::common::protobuf_header_2eproto::AddDescriptors();
  ::usv::common::protobuf_geometry_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gnss_5fun237_2eproto

const ::google::protobuf::EnumDescriptor* InsStat_LocationStat_descriptor() {
  protobuf_gnss_5fun237_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gnss_5fun237_2eproto::file_level_enum_descriptors[0];
}
bool InsStat_LocationStat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InsStat_LocationStat InsStat::LOCATION_VALID;
const InsStat_LocationStat InsStat::LOCATION_INVALID;
const InsStat_LocationStat InsStat::LocationStat_MIN;
const InsStat_LocationStat InsStat::LocationStat_MAX;
const int InsStat::LocationStat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* InsStat_DirectionFinderStat_descriptor() {
  protobuf_gnss_5fun237_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gnss_5fun237_2eproto::file_level_enum_descriptors[1];
}
bool InsStat_DirectionFinderStat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InsStat_DirectionFinderStat InsStat::GPS_ORIENTATION;
const InsStat_DirectionFinderStat InsStat::GYRO_ORIENTATION;
const InsStat_DirectionFinderStat InsStat::DirectionFinderStat_MIN;
const InsStat_DirectionFinderStat InsStat::DirectionFinderStat_MAX;
const int InsStat::DirectionFinderStat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* InsStat_GPSLocationStat_descriptor() {
  protobuf_gnss_5fun237_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gnss_5fun237_2eproto::file_level_enum_descriptors[2];
}
bool InsStat_GPSLocationStat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InsStat_GPSLocationStat InsStat::GPS_NO_LOCATION;
const InsStat_GPSLocationStat InsStat::GPS_SINGLE_LOCATION;
const InsStat_GPSLocationStat InsStat::GPS_DIFF_LOCATION;
const InsStat_GPSLocationStat InsStat::GPS_RTK_FIXED_LOCATION;
const InsStat_GPSLocationStat InsStat::GPS_RTK_FLOAT_LOCATION;
const InsStat_GPSLocationStat InsStat::GPSLocationStat_MIN;
const InsStat_GPSLocationStat InsStat::GPSLocationStat_MAX;
const int InsStat::GPSLocationStat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsStat::kLocationStatFieldNumber;
const int InsStat::kDirectionFinderStatFieldNumber;
const int InsStat::kGpsLocationStatFieldNumber;
const int InsStat::kUsingSatelliteNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsStat::InsStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gnss_5fun237_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:usv.localization.gnss.InsStat)
}
InsStat::InsStat(const InsStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&locationstat_, &from.locationstat_,
    static_cast<size_t>(reinterpret_cast<char*>(&using_satellite_num_) -
    reinterpret_cast<char*>(&locationstat_)) + sizeof(using_satellite_num_));
  // @@protoc_insertion_point(copy_constructor:usv.localization.gnss.InsStat)
}

void InsStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&locationstat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&using_satellite_num_) -
      reinterpret_cast<char*>(&locationstat_)) + sizeof(using_satellite_num_));
}

InsStat::~InsStat() {
  // @@protoc_insertion_point(destructor:usv.localization.gnss.InsStat)
  SharedDtor();
}

void InsStat::SharedDtor() {
}

void InsStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsStat::descriptor() {
  protobuf_gnss_5fun237_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gnss_5fun237_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InsStat& InsStat::default_instance() {
  protobuf_gnss_5fun237_2eproto::InitDefaults();
  return *internal_default_instance();
}

InsStat* InsStat::New(::google::protobuf::Arena* arena) const {
  InsStat* n = new InsStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InsStat::Clear() {
// @@protoc_insertion_point(message_clear_start:usv.localization.gnss.InsStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&locationstat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&using_satellite_num_) -
        reinterpret_cast<char*>(&locationstat_)) + sizeof(using_satellite_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InsStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:usv.localization.gnss.InsStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .usv.localization.gnss.InsStat.LocationStat locationStat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::usv::localization::gnss::InsStat_LocationStat_IsValid(value)) {
            set_locationstat(static_cast< ::usv::localization::gnss::InsStat_LocationStat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usv.localization.gnss.InsStat.DirectionFinderStat directionFinderStat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::usv::localization::gnss::InsStat_DirectionFinderStat_IsValid(value)) {
            set_directionfinderstat(static_cast< ::usv::localization::gnss::InsStat_DirectionFinderStat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usv.localization.gnss.InsStat.GPSLocationStat gpsLocationStat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::usv::localization::gnss::InsStat_GPSLocationStat_IsValid(value)) {
            set_gpslocationstat(static_cast< ::usv::localization::gnss::InsStat_GPSLocationStat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 using_satellite_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_using_satellite_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &using_satellite_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:usv.localization.gnss.InsStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:usv.localization.gnss.InsStat)
  return false;
#undef DO_
}

void InsStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:usv.localization.gnss.InsStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .usv.localization.gnss.InsStat.LocationStat locationStat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->locationstat(), output);
  }

  // optional .usv.localization.gnss.InsStat.DirectionFinderStat directionFinderStat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->directionfinderstat(), output);
  }

  // optional .usv.localization.gnss.InsStat.GPSLocationStat gpsLocationStat = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gpslocationstat(), output);
  }

  // optional int32 using_satellite_num = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->using_satellite_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:usv.localization.gnss.InsStat)
}

::google::protobuf::uint8* InsStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:usv.localization.gnss.InsStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .usv.localization.gnss.InsStat.LocationStat locationStat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->locationstat(), target);
  }

  // optional .usv.localization.gnss.InsStat.DirectionFinderStat directionFinderStat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->directionfinderstat(), target);
  }

  // optional .usv.localization.gnss.InsStat.GPSLocationStat gpsLocationStat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gpslocationstat(), target);
  }

  // optional int32 using_satellite_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->using_satellite_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usv.localization.gnss.InsStat)
  return target;
}

size_t InsStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usv.localization.gnss.InsStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .usv.localization.gnss.InsStat.LocationStat locationStat = 1;
    if (has_locationstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->locationstat());
    }

    // optional .usv.localization.gnss.InsStat.DirectionFinderStat directionFinderStat = 2;
    if (has_directionfinderstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->directionfinderstat());
    }

    // optional .usv.localization.gnss.InsStat.GPSLocationStat gpsLocationStat = 3;
    if (has_gpslocationstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gpslocationstat());
    }

    // optional int32 using_satellite_num = 4;
    if (has_using_satellite_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->using_satellite_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usv.localization.gnss.InsStat)
  GOOGLE_DCHECK_NE(&from, this);
  const InsStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InsStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usv.localization.gnss.InsStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usv.localization.gnss.InsStat)
    MergeFrom(*source);
  }
}

void InsStat::MergeFrom(const InsStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usv.localization.gnss.InsStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      locationstat_ = from.locationstat_;
    }
    if (cached_has_bits & 0x00000002u) {
      directionfinderstat_ = from.directionfinderstat_;
    }
    if (cached_has_bits & 0x00000004u) {
      gpslocationstat_ = from.gpslocationstat_;
    }
    if (cached_has_bits & 0x00000008u) {
      using_satellite_num_ = from.using_satellite_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usv.localization.gnss.InsStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsStat::CopyFrom(const InsStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usv.localization.gnss.InsStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsStat::IsInitialized() const {
  return true;
}

void InsStat::Swap(InsStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsStat::InternalSwap(InsStat* other) {
  using std::swap;
  swap(locationstat_, other->locationstat_);
  swap(directionfinderstat_, other->directionfinderstat_);
  swap(gpslocationstat_, other->gpslocationstat_);
  swap(using_satellite_num_, other->using_satellite_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InsStat::GetMetadata() const {
  protobuf_gnss_5fun237_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gnss_5fun237_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InsStat

// optional .usv.localization.gnss.InsStat.LocationStat locationStat = 1;
bool InsStat::has_locationstat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InsStat::set_has_locationstat() {
  _has_bits_[0] |= 0x00000001u;
}
void InsStat::clear_has_locationstat() {
  _has_bits_[0] &= ~0x00000001u;
}
void InsStat::clear_locationstat() {
  locationstat_ = 0;
  clear_has_locationstat();
}
::usv::localization::gnss::InsStat_LocationStat InsStat::locationstat() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.InsStat.locationStat)
  return static_cast< ::usv::localization::gnss::InsStat_LocationStat >(locationstat_);
}
void InsStat::set_locationstat(::usv::localization::gnss::InsStat_LocationStat value) {
  assert(::usv::localization::gnss::InsStat_LocationStat_IsValid(value));
  set_has_locationstat();
  locationstat_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.InsStat.locationStat)
}

// optional .usv.localization.gnss.InsStat.DirectionFinderStat directionFinderStat = 2;
bool InsStat::has_directionfinderstat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InsStat::set_has_directionfinderstat() {
  _has_bits_[0] |= 0x00000002u;
}
void InsStat::clear_has_directionfinderstat() {
  _has_bits_[0] &= ~0x00000002u;
}
void InsStat::clear_directionfinderstat() {
  directionfinderstat_ = 0;
  clear_has_directionfinderstat();
}
::usv::localization::gnss::InsStat_DirectionFinderStat InsStat::directionfinderstat() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.InsStat.directionFinderStat)
  return static_cast< ::usv::localization::gnss::InsStat_DirectionFinderStat >(directionfinderstat_);
}
void InsStat::set_directionfinderstat(::usv::localization::gnss::InsStat_DirectionFinderStat value) {
  assert(::usv::localization::gnss::InsStat_DirectionFinderStat_IsValid(value));
  set_has_directionfinderstat();
  directionfinderstat_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.InsStat.directionFinderStat)
}

// optional .usv.localization.gnss.InsStat.GPSLocationStat gpsLocationStat = 3;
bool InsStat::has_gpslocationstat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InsStat::set_has_gpslocationstat() {
  _has_bits_[0] |= 0x00000004u;
}
void InsStat::clear_has_gpslocationstat() {
  _has_bits_[0] &= ~0x00000004u;
}
void InsStat::clear_gpslocationstat() {
  gpslocationstat_ = 0;
  clear_has_gpslocationstat();
}
::usv::localization::gnss::InsStat_GPSLocationStat InsStat::gpslocationstat() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.InsStat.gpsLocationStat)
  return static_cast< ::usv::localization::gnss::InsStat_GPSLocationStat >(gpslocationstat_);
}
void InsStat::set_gpslocationstat(::usv::localization::gnss::InsStat_GPSLocationStat value) {
  assert(::usv::localization::gnss::InsStat_GPSLocationStat_IsValid(value));
  set_has_gpslocationstat();
  gpslocationstat_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.InsStat.gpsLocationStat)
}

// optional int32 using_satellite_num = 4;
bool InsStat::has_using_satellite_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InsStat::set_has_using_satellite_num() {
  _has_bits_[0] |= 0x00000008u;
}
void InsStat::clear_has_using_satellite_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void InsStat::clear_using_satellite_num() {
  using_satellite_num_ = 0;
  clear_has_using_satellite_num();
}
::google::protobuf::int32 InsStat::using_satellite_num() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.InsStat.using_satellite_num)
  return using_satellite_num_;
}
void InsStat::set_using_satellite_num(::google::protobuf::int32 value) {
  set_has_using_satellite_num();
  using_satellite_num_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.InsStat.using_satellite_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsTime::kYearFieldNumber;
const int InsTime::kMonthFieldNumber;
const int InsTime::kDateFieldNumber;
const int InsTime::kHourFieldNumber;
const int InsTime::kMinuteFieldNumber;
const int InsTime::kSecondFieldNumber;
const int InsTime::kSecondDecadeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsTime::InsTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gnss_5fun237_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:usv.localization.gnss.InsTime)
}
InsTime::InsTime(const InsTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_decade_) -
    reinterpret_cast<char*>(&year_)) + sizeof(second_decade_));
  // @@protoc_insertion_point(copy_constructor:usv.localization.gnss.InsTime)
}

void InsTime::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_decade_) -
      reinterpret_cast<char*>(&year_)) + sizeof(second_decade_));
}

InsTime::~InsTime() {
  // @@protoc_insertion_point(destructor:usv.localization.gnss.InsTime)
  SharedDtor();
}

void InsTime::SharedDtor() {
}

void InsTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsTime::descriptor() {
  protobuf_gnss_5fun237_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gnss_5fun237_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InsTime& InsTime::default_instance() {
  protobuf_gnss_5fun237_2eproto::InitDefaults();
  return *internal_default_instance();
}

InsTime* InsTime::New(::google::protobuf::Arena* arena) const {
  InsTime* n = new InsTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InsTime::Clear() {
// @@protoc_insertion_point(message_clear_start:usv.localization.gnss.InsTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&year_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&second_decade_) -
        reinterpret_cast<char*>(&year_)) + sizeof(second_decade_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InsTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:usv.localization.gnss.InsTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 year = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 month = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 date = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hour = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_hour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minute = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_minute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 second = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 second_decade = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_second_decade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_decade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:usv.localization.gnss.InsTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:usv.localization.gnss.InsTime)
  return false;
#undef DO_
}

void InsTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:usv.localization.gnss.InsTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 year = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->year(), output);
  }

  // optional int32 month = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->month(), output);
  }

  // optional int32 date = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->date(), output);
  }

  // optional int32 hour = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hour(), output);
  }

  // optional int32 minute = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->minute(), output);
  }

  // optional int32 second = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->second(), output);
  }

  // optional int32 second_decade = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->second_decade(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:usv.localization.gnss.InsTime)
}

::google::protobuf::uint8* InsTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:usv.localization.gnss.InsTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 year = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->year(), target);
  }

  // optional int32 month = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->month(), target);
  }

  // optional int32 date = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->date(), target);
  }

  // optional int32 hour = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hour(), target);
  }

  // optional int32 minute = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->minute(), target);
  }

  // optional int32 second = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->second(), target);
  }

  // optional int32 second_decade = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->second_decade(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usv.localization.gnss.InsTime)
  return target;
}

size_t InsTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usv.localization.gnss.InsTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }

    // optional int32 hour = 4;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hour());
    }

    // optional int32 minute = 5;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minute());
    }

    // optional int32 second = 6;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

    // optional int32 second_decade = 7;
    if (has_second_decade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_decade());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usv.localization.gnss.InsTime)
  GOOGLE_DCHECK_NE(&from, this);
  const InsTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InsTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usv.localization.gnss.InsTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usv.localization.gnss.InsTime)
    MergeFrom(*source);
  }
}

void InsTime::MergeFrom(const InsTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usv.localization.gnss.InsTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000002u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000004u) {
      date_ = from.date_;
    }
    if (cached_has_bits & 0x00000008u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000010u) {
      minute_ = from.minute_;
    }
    if (cached_has_bits & 0x00000020u) {
      second_ = from.second_;
    }
    if (cached_has_bits & 0x00000040u) {
      second_decade_ = from.second_decade_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usv.localization.gnss.InsTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsTime::CopyFrom(const InsTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usv.localization.gnss.InsTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsTime::IsInitialized() const {
  return true;
}

void InsTime::Swap(InsTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsTime::InternalSwap(InsTime* other) {
  using std::swap;
  swap(year_, other->year_);
  swap(month_, other->month_);
  swap(date_, other->date_);
  swap(hour_, other->hour_);
  swap(minute_, other->minute_);
  swap(second_, other->second_);
  swap(second_decade_, other->second_decade_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InsTime::GetMetadata() const {
  protobuf_gnss_5fun237_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gnss_5fun237_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InsTime

// optional int32 year = 1;
bool InsTime::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InsTime::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
void InsTime::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
void InsTime::clear_year() {
  year_ = 0;
  clear_has_year();
}
::google::protobuf::int32 InsTime::year() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.InsTime.year)
  return year_;
}
void InsTime::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.InsTime.year)
}

// optional int32 month = 2;
bool InsTime::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InsTime::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
void InsTime::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
void InsTime::clear_month() {
  month_ = 0;
  clear_has_month();
}
::google::protobuf::int32 InsTime::month() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.InsTime.month)
  return month_;
}
void InsTime::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.InsTime.month)
}

// optional int32 date = 3;
bool InsTime::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InsTime::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
void InsTime::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
void InsTime::clear_date() {
  date_ = 0;
  clear_has_date();
}
::google::protobuf::int32 InsTime::date() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.InsTime.date)
  return date_;
}
void InsTime::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.InsTime.date)
}

// optional int32 hour = 4;
bool InsTime::has_hour() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InsTime::set_has_hour() {
  _has_bits_[0] |= 0x00000008u;
}
void InsTime::clear_has_hour() {
  _has_bits_[0] &= ~0x00000008u;
}
void InsTime::clear_hour() {
  hour_ = 0;
  clear_has_hour();
}
::google::protobuf::int32 InsTime::hour() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.InsTime.hour)
  return hour_;
}
void InsTime::set_hour(::google::protobuf::int32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.InsTime.hour)
}

// optional int32 minute = 5;
bool InsTime::has_minute() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InsTime::set_has_minute() {
  _has_bits_[0] |= 0x00000010u;
}
void InsTime::clear_has_minute() {
  _has_bits_[0] &= ~0x00000010u;
}
void InsTime::clear_minute() {
  minute_ = 0;
  clear_has_minute();
}
::google::protobuf::int32 InsTime::minute() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.InsTime.minute)
  return minute_;
}
void InsTime::set_minute(::google::protobuf::int32 value) {
  set_has_minute();
  minute_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.InsTime.minute)
}

// optional int32 second = 6;
bool InsTime::has_second() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InsTime::set_has_second() {
  _has_bits_[0] |= 0x00000020u;
}
void InsTime::clear_has_second() {
  _has_bits_[0] &= ~0x00000020u;
}
void InsTime::clear_second() {
  second_ = 0;
  clear_has_second();
}
::google::protobuf::int32 InsTime::second() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.InsTime.second)
  return second_;
}
void InsTime::set_second(::google::protobuf::int32 value) {
  set_has_second();
  second_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.InsTime.second)
}

// optional int32 second_decade = 7;
bool InsTime::has_second_decade() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InsTime::set_has_second_decade() {
  _has_bits_[0] |= 0x00000040u;
}
void InsTime::clear_has_second_decade() {
  _has_bits_[0] &= ~0x00000040u;
}
void InsTime::clear_second_decade() {
  second_decade_ = 0;
  clear_has_second_decade();
}
::google::protobuf::int32 InsTime::second_decade() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.InsTime.second_decade)
  return second_decade_;
}
void InsTime::set_second_decade(::google::protobuf::int32 value) {
  set_has_second_decade();
  second_decade_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.InsTime.second_decade)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins_un237::kHeaderFieldNumber;
const int Ins_un237::kInsStatFieldNumber;
const int Ins_un237::kInsTimeFieldNumber;
const int Ins_un237::kPostionFieldNumber;
const int Ins_un237::kSpeedFieldNumber;
const int Ins_un237::kHeadingFieldNumber;
const int Ins_un237::kMotionDirectionFieldNumber;
const int Ins_un237::kRotFieldNumber;
const int Ins_un237::kHeaveFieldNumber;
const int Ins_un237::kPitchFieldNumber;
const int Ins_un237::kRollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins_un237::Ins_un237()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gnss_5fun237_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:usv.localization.gnss.Ins_un237)
}
Ins_un237::Ins_un237(const Ins_un237& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::usv::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_insstat()) {
    insstat_ = new ::usv::localization::gnss::InsStat(*from.insstat_);
  } else {
    insstat_ = NULL;
  }
  if (from.has_instime()) {
    instime_ = new ::usv::localization::gnss::InsTime(*from.instime_);
  } else {
    instime_ = NULL;
  }
  if (from.has_postion()) {
    postion_ = new ::usv::common::PointLLH(*from.postion_);
  } else {
    postion_ = NULL;
  }
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:usv.localization.gnss.Ins_un237)
}

void Ins_un237::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&header_)) + sizeof(roll_));
}

Ins_un237::~Ins_un237() {
  // @@protoc_insertion_point(destructor:usv.localization.gnss.Ins_un237)
  SharedDtor();
}

void Ins_un237::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete insstat_;
  if (this != internal_default_instance()) delete instime_;
  if (this != internal_default_instance()) delete postion_;
}

void Ins_un237::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ins_un237::descriptor() {
  protobuf_gnss_5fun237_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gnss_5fun237_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ins_un237& Ins_un237::default_instance() {
  protobuf_gnss_5fun237_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ins_un237* Ins_un237::New(::google::protobuf::Arena* arena) const {
  Ins_un237* n = new Ins_un237;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ins_un237::Clear() {
// @@protoc_insertion_point(message_clear_start:usv.localization.gnss.Ins_un237)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::usv::common::Header::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(insstat_ != NULL);
      insstat_->::usv::localization::gnss::InsStat::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(instime_ != NULL);
      instime_->::usv::localization::gnss::InsTime::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(postion_ != NULL);
      postion_->::usv::common::PointLLH::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rot_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(rot_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&heave_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roll_) -
        reinterpret_cast<char*>(&heave_)) + sizeof(roll_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ins_un237::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:usv.localization.gnss.Ins_un237)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .usv.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usv.localization.gnss.InsStat insStat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_insstat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usv.localization.gnss.InsTime insTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usv.common.PointLLH postion = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_postion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double motionDirection = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_motiondirection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motiondirection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rot = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_rot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heave = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_heave();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pitch = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roll = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_roll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:usv.localization.gnss.Ins_un237)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:usv.localization.gnss.Ins_un237)
  return false;
#undef DO_
}

void Ins_un237::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:usv.localization.gnss.Ins_un237)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .usv.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .usv.localization.gnss.InsStat insStat = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->insstat_, output);
  }

  // optional .usv.localization.gnss.InsTime insTime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->instime_, output);
  }

  // optional .usv.common.PointLLH postion = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->postion_, output);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(), output);
  }

  // optional double heading = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->heading(), output);
  }

  // optional double motionDirection = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->motiondirection(), output);
  }

  // optional double rot = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->rot(), output);
  }

  // optional double heave = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->heave(), output);
  }

  // optional double pitch = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->pitch(), output);
  }

  // optional double roll = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->roll(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:usv.localization.gnss.Ins_un237)
}

::google::protobuf::uint8* Ins_un237::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:usv.localization.gnss.Ins_un237)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .usv.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .usv.localization.gnss.InsStat insStat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->insstat_, deterministic, target);
  }

  // optional .usv.localization.gnss.InsTime insTime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->instime_, deterministic, target);
  }

  // optional .usv.common.PointLLH postion = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->postion_, deterministic, target);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed(), target);
  }

  // optional double heading = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->heading(), target);
  }

  // optional double motionDirection = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->motiondirection(), target);
  }

  // optional double rot = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->rot(), target);
  }

  // optional double heave = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->heave(), target);
  }

  // optional double pitch = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->pitch(), target);
  }

  // optional double roll = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->roll(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usv.localization.gnss.Ins_un237)
  return target;
}

size_t Ins_un237::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usv.localization.gnss.Ins_un237)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .usv.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .usv.localization.gnss.InsStat insStat = 2;
    if (has_insstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->insstat_);
    }

    // optional .usv.localization.gnss.InsTime insTime = 3;
    if (has_instime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->instime_);
    }

    // optional .usv.common.PointLLH postion = 4;
    if (has_postion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->postion_);
    }

    // optional double speed = 5;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double heading = 6;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double motionDirection = 7;
    if (has_motiondirection()) {
      total_size += 1 + 8;
    }

    // optional double rot = 8;
    if (has_rot()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double heave = 9;
    if (has_heave()) {
      total_size += 1 + 8;
    }

    // optional double pitch = 10;
    if (has_pitch()) {
      total_size += 1 + 8;
    }

    // optional double roll = 11;
    if (has_roll()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ins_un237::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usv.localization.gnss.Ins_un237)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins_un237* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins_un237>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usv.localization.gnss.Ins_un237)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usv.localization.gnss.Ins_un237)
    MergeFrom(*source);
  }
}

void Ins_un237::MergeFrom(const Ins_un237& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usv.localization.gnss.Ins_un237)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::usv::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_insstat()->::usv::localization::gnss::InsStat::MergeFrom(from.insstat());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_instime()->::usv::localization::gnss::InsTime::MergeFrom(from.instime());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_postion()->::usv::common::PointLLH::MergeFrom(from.postion());
    }
    if (cached_has_bits & 0x00000010u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000040u) {
      motiondirection_ = from.motiondirection_;
    }
    if (cached_has_bits & 0x00000080u) {
      rot_ = from.rot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      heave_ = from.heave_;
    }
    if (cached_has_bits & 0x00000200u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000400u) {
      roll_ = from.roll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ins_un237::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usv.localization.gnss.Ins_un237)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins_un237::CopyFrom(const Ins_un237& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usv.localization.gnss.Ins_un237)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins_un237::IsInitialized() const {
  return true;
}

void Ins_un237::Swap(Ins_un237* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins_un237::InternalSwap(Ins_un237* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(insstat_, other->insstat_);
  swap(instime_, other->instime_);
  swap(postion_, other->postion_);
  swap(speed_, other->speed_);
  swap(heading_, other->heading_);
  swap(motiondirection_, other->motiondirection_);
  swap(rot_, other->rot_);
  swap(heave_, other->heave_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ins_un237::GetMetadata() const {
  protobuf_gnss_5fun237_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gnss_5fun237_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ins_un237

// optional .usv.common.Header header = 1;
bool Ins_un237::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ins_un237::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Ins_un237::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ins_un237::clear_header() {
  if (header_ != NULL) header_->::usv::common::Header::Clear();
  clear_has_header();
}
const ::usv::common::Header& Ins_un237::header() const {
  const ::usv::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:usv.localization.gnss.Ins_un237.header)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::common::Header*>(
      &::usv::common::_Header_default_instance_);
}
::usv::common::Header* Ins_un237::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::usv::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:usv.localization.gnss.Ins_un237.header)
  return header_;
}
::usv::common::Header* Ins_un237::release_header() {
  // @@protoc_insertion_point(field_release:usv.localization.gnss.Ins_un237.header)
  clear_has_header();
  ::usv::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Ins_un237::set_allocated_header(::usv::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.localization.gnss.Ins_un237.header)
}

// optional .usv.localization.gnss.InsStat insStat = 2;
bool Ins_un237::has_insstat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ins_un237::set_has_insstat() {
  _has_bits_[0] |= 0x00000002u;
}
void Ins_un237::clear_has_insstat() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ins_un237::clear_insstat() {
  if (insstat_ != NULL) insstat_->::usv::localization::gnss::InsStat::Clear();
  clear_has_insstat();
}
const ::usv::localization::gnss::InsStat& Ins_un237::insstat() const {
  const ::usv::localization::gnss::InsStat* p = insstat_;
  // @@protoc_insertion_point(field_get:usv.localization.gnss.Ins_un237.insStat)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::localization::gnss::InsStat*>(
      &::usv::localization::gnss::_InsStat_default_instance_);
}
::usv::localization::gnss::InsStat* Ins_un237::mutable_insstat() {
  set_has_insstat();
  if (insstat_ == NULL) {
    insstat_ = new ::usv::localization::gnss::InsStat;
  }
  // @@protoc_insertion_point(field_mutable:usv.localization.gnss.Ins_un237.insStat)
  return insstat_;
}
::usv::localization::gnss::InsStat* Ins_un237::release_insstat() {
  // @@protoc_insertion_point(field_release:usv.localization.gnss.Ins_un237.insStat)
  clear_has_insstat();
  ::usv::localization::gnss::InsStat* temp = insstat_;
  insstat_ = NULL;
  return temp;
}
void Ins_un237::set_allocated_insstat(::usv::localization::gnss::InsStat* insstat) {
  delete insstat_;
  insstat_ = insstat;
  if (insstat) {
    set_has_insstat();
  } else {
    clear_has_insstat();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.localization.gnss.Ins_un237.insStat)
}

// optional .usv.localization.gnss.InsTime insTime = 3;
bool Ins_un237::has_instime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ins_un237::set_has_instime() {
  _has_bits_[0] |= 0x00000004u;
}
void Ins_un237::clear_has_instime() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ins_un237::clear_instime() {
  if (instime_ != NULL) instime_->::usv::localization::gnss::InsTime::Clear();
  clear_has_instime();
}
const ::usv::localization::gnss::InsTime& Ins_un237::instime() const {
  const ::usv::localization::gnss::InsTime* p = instime_;
  // @@protoc_insertion_point(field_get:usv.localization.gnss.Ins_un237.insTime)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::localization::gnss::InsTime*>(
      &::usv::localization::gnss::_InsTime_default_instance_);
}
::usv::localization::gnss::InsTime* Ins_un237::mutable_instime() {
  set_has_instime();
  if (instime_ == NULL) {
    instime_ = new ::usv::localization::gnss::InsTime;
  }
  // @@protoc_insertion_point(field_mutable:usv.localization.gnss.Ins_un237.insTime)
  return instime_;
}
::usv::localization::gnss::InsTime* Ins_un237::release_instime() {
  // @@protoc_insertion_point(field_release:usv.localization.gnss.Ins_un237.insTime)
  clear_has_instime();
  ::usv::localization::gnss::InsTime* temp = instime_;
  instime_ = NULL;
  return temp;
}
void Ins_un237::set_allocated_instime(::usv::localization::gnss::InsTime* instime) {
  delete instime_;
  instime_ = instime;
  if (instime) {
    set_has_instime();
  } else {
    clear_has_instime();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.localization.gnss.Ins_un237.insTime)
}

// optional .usv.common.PointLLH postion = 4;
bool Ins_un237::has_postion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ins_un237::set_has_postion() {
  _has_bits_[0] |= 0x00000008u;
}
void Ins_un237::clear_has_postion() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ins_un237::clear_postion() {
  if (postion_ != NULL) postion_->::usv::common::PointLLH::Clear();
  clear_has_postion();
}
const ::usv::common::PointLLH& Ins_un237::postion() const {
  const ::usv::common::PointLLH* p = postion_;
  // @@protoc_insertion_point(field_get:usv.localization.gnss.Ins_un237.postion)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::common::PointLLH*>(
      &::usv::common::_PointLLH_default_instance_);
}
::usv::common::PointLLH* Ins_un237::mutable_postion() {
  set_has_postion();
  if (postion_ == NULL) {
    postion_ = new ::usv::common::PointLLH;
  }
  // @@protoc_insertion_point(field_mutable:usv.localization.gnss.Ins_un237.postion)
  return postion_;
}
::usv::common::PointLLH* Ins_un237::release_postion() {
  // @@protoc_insertion_point(field_release:usv.localization.gnss.Ins_un237.postion)
  clear_has_postion();
  ::usv::common::PointLLH* temp = postion_;
  postion_ = NULL;
  return temp;
}
void Ins_un237::set_allocated_postion(::usv::common::PointLLH* postion) {
  delete postion_;
  postion_ = postion;
  if (postion) {
    set_has_postion();
  } else {
    clear_has_postion();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.localization.gnss.Ins_un237.postion)
}

// optional double speed = 5;
bool Ins_un237::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ins_un237::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
void Ins_un237::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ins_un237::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
double Ins_un237::speed() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.Ins_un237.speed)
  return speed_;
}
void Ins_un237::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.Ins_un237.speed)
}

// optional double heading = 6;
bool Ins_un237::has_heading() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ins_un237::set_has_heading() {
  _has_bits_[0] |= 0x00000020u;
}
void Ins_un237::clear_has_heading() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ins_un237::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double Ins_un237::heading() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.Ins_un237.heading)
  return heading_;
}
void Ins_un237::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.Ins_un237.heading)
}

// optional double motionDirection = 7;
bool Ins_un237::has_motiondirection() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Ins_un237::set_has_motiondirection() {
  _has_bits_[0] |= 0x00000040u;
}
void Ins_un237::clear_has_motiondirection() {
  _has_bits_[0] &= ~0x00000040u;
}
void Ins_un237::clear_motiondirection() {
  motiondirection_ = 0;
  clear_has_motiondirection();
}
double Ins_un237::motiondirection() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.Ins_un237.motionDirection)
  return motiondirection_;
}
void Ins_un237::set_motiondirection(double value) {
  set_has_motiondirection();
  motiondirection_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.Ins_un237.motionDirection)
}

// optional double rot = 8;
bool Ins_un237::has_rot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Ins_un237::set_has_rot() {
  _has_bits_[0] |= 0x00000080u;
}
void Ins_un237::clear_has_rot() {
  _has_bits_[0] &= ~0x00000080u;
}
void Ins_un237::clear_rot() {
  rot_ = 0;
  clear_has_rot();
}
double Ins_un237::rot() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.Ins_un237.rot)
  return rot_;
}
void Ins_un237::set_rot(double value) {
  set_has_rot();
  rot_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.Ins_un237.rot)
}

// optional double heave = 9;
bool Ins_un237::has_heave() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Ins_un237::set_has_heave() {
  _has_bits_[0] |= 0x00000100u;
}
void Ins_un237::clear_has_heave() {
  _has_bits_[0] &= ~0x00000100u;
}
void Ins_un237::clear_heave() {
  heave_ = 0;
  clear_has_heave();
}
double Ins_un237::heave() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.Ins_un237.heave)
  return heave_;
}
void Ins_un237::set_heave(double value) {
  set_has_heave();
  heave_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.Ins_un237.heave)
}

// optional double pitch = 10;
bool Ins_un237::has_pitch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Ins_un237::set_has_pitch() {
  _has_bits_[0] |= 0x00000200u;
}
void Ins_un237::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000200u;
}
void Ins_un237::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
double Ins_un237::pitch() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.Ins_un237.pitch)
  return pitch_;
}
void Ins_un237::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.Ins_un237.pitch)
}

// optional double roll = 11;
bool Ins_un237::has_roll() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Ins_un237::set_has_roll() {
  _has_bits_[0] |= 0x00000400u;
}
void Ins_un237::clear_has_roll() {
  _has_bits_[0] &= ~0x00000400u;
}
void Ins_un237::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
double Ins_un237::roll() const {
  // @@protoc_insertion_point(field_get:usv.localization.gnss.Ins_un237.roll)
  return roll_;
}
void Ins_un237::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:usv.localization.gnss.Ins_un237.roll)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace localization
}  // namespace usv

// @@protoc_insertion_point(global_scope)
