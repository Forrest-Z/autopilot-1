// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stdafx.h"
#include "header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace usv {
namespace common {
class HeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Header>
     _instance;
} _Header_default_instance_;

namespace protobuf_header_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, sequence_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, lidar_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, camera_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, radar_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, frame_id_),
  3,
  0,
  7,
  4,
  5,
  6,
  8,
  2,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(Header)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Header_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "header.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::usv::common::protobuf_error_5fcode_2eproto::InitDefaults();
  _Header_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Header_default_instance_);_Header_default_instance_._instance.get_mutable()->status_ = const_cast< ::usv::common::StatusPb*>(
      ::usv::common::StatusPb::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014header.proto\022\nusv.common\032\020error_code.p"
      "roto\"\342\001\n\006Header\022\025\n\rtimestamp_sec\030\001 \001(\001\022\023"
      "\n\013module_name\030\002 \001(\t\022\024\n\014sequence_num\030\003 \001("
      "\r\022\027\n\017lidar_timestamp\030\004 \001(\004\022\030\n\020camera_tim"
      "estamp\030\005 \001(\004\022\027\n\017radar_timestamp\030\006 \001(\004\022\022\n"
      "\007version\030\007 \001(\r:\0011\022$\n\006status\030\010 \001(\0132\024.usv."
      "common.StatusPb\022\020\n\010frame_id\030\t \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "header.proto", &protobuf_RegisterTypes);
  ::usv::common::protobuf_error_5fcode_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_header_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kTimestampSecFieldNumber;
const int Header::kModuleNameFieldNumber;
const int Header::kSequenceNumFieldNumber;
const int Header::kLidarTimestampFieldNumber;
const int Header::kCameraTimestampFieldNumber;
const int Header::kRadarTimestampFieldNumber;
const int Header::kVersionFieldNumber;
const int Header::kStatusFieldNumber;
const int Header::kFrameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_header_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:usv.common.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_module_name()) {
    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_id()) {
    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  if (from.has_status()) {
    status_ = new ::usv::common::StatusPb(*from.status_);
  } else {
    status_ = NULL;
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:usv.common.Header)
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&status_)) + sizeof(sequence_num_));
  version_ = 1u;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:usv.common.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_header_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  protobuf_header_2eproto::InitDefaults();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:usv.common.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!module_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*module_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!frame_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*frame_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != NULL);
      status_->::usv::common::StatusPb::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_num_) -
        reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(sequence_num_));
  }
  version_ = 1u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:usv.common.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string module_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module_name().data(), static_cast<int>(this->module_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "usv.common.Header.module_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sequence_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lidar_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_lidar_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lidar_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 camera_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_camera_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &camera_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 radar_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_radar_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &radar_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .usv.common.StatusPb status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string frame_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), static_cast<int>(this->frame_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "usv.common.Header.frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:usv.common.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:usv.common.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:usv.common.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional string module_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usv.common.Header.module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->module_name(), output);
  }

  // optional uint32 sequence_num = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_num(), output);
  }

  // optional uint64 lidar_timestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lidar_timestamp(), output);
  }

  // optional uint64 camera_timestamp = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->camera_timestamp(), output);
  }

  // optional uint64 radar_timestamp = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->radar_timestamp(), output);
  }

  // optional uint32 version = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->version(), output);
  }

  // optional .usv.common.StatusPb status = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->status_, output);
  }

  // optional string frame_id = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usv.common.Header.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->frame_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:usv.common.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:usv.common.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional string module_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usv.common.Header.module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->module_name(), target);
  }

  // optional uint32 sequence_num = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_num(), target);
  }

  // optional uint64 lidar_timestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lidar_timestamp(), target);
  }

  // optional uint64 camera_timestamp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->camera_timestamp(), target);
  }

  // optional uint64 radar_timestamp = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->radar_timestamp(), target);
  }

  // optional uint32 version = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->version(), target);
  }

  // optional .usv.common.StatusPb status = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->status_, deterministic, target);
  }

  // optional string frame_id = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usv.common.Header.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->frame_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:usv.common.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:usv.common.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string module_name = 2;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

    // optional string frame_id = 9;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // optional .usv.common.StatusPb status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional uint64 lidar_timestamp = 4;
    if (has_lidar_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lidar_timestamp());
    }

    // optional uint64 camera_timestamp = 5;
    if (has_camera_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->camera_timestamp());
    }

    // optional uint64 radar_timestamp = 6;
    if (has_radar_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->radar_timestamp());
    }

    // optional uint32 sequence_num = 3;
    if (has_sequence_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_num());
    }

  }
  // optional uint32 version = 7 [default = 1];
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:usv.common.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:usv.common.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:usv.common.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:usv.common.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_module_name();
      module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_status()->::usv::common::StatusPb::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      lidar_timestamp_ = from.lidar_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      camera_timestamp_ = from.camera_timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      radar_timestamp_ = from.radar_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      sequence_num_ = from.sequence_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_version(from.version());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:usv.common.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:usv.common.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  module_name_.Swap(&other->module_name_);
  frame_id_.Swap(&other->frame_id_);
  swap(status_, other->status_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(lidar_timestamp_, other->lidar_timestamp_);
  swap(camera_timestamp_, other->camera_timestamp_);
  swap(radar_timestamp_, other->radar_timestamp_);
  swap(sequence_num_, other->sequence_num_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_header_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// optional double timestamp_sec = 1;
bool Header::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Header::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000008u;
}
void Header::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
void Header::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
double Header::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:usv.common.Header.timestamp_sec)
  return timestamp_sec_;
}
void Header::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:usv.common.Header.timestamp_sec)
}

// optional string module_name = 2;
bool Header::has_module_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Header::set_has_module_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Header::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Header::clear_module_name() {
  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module_name();
}
const ::std::string& Header::module_name() const {
  // @@protoc_insertion_point(field_get:usv.common.Header.module_name)
  return module_name_.GetNoArena();
}
void Header::set_module_name(const ::std::string& value) {
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:usv.common.Header.module_name)
}
#if LANG_CXX11
void Header::set_module_name(::std::string&& value) {
  set_has_module_name();
  module_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:usv.common.Header.module_name)
}
#endif
void Header::set_module_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:usv.common.Header.module_name)
}
void Header::set_module_name(const char* value, size_t size) {
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:usv.common.Header.module_name)
}
::std::string* Header::mutable_module_name() {
  set_has_module_name();
  // @@protoc_insertion_point(field_mutable:usv.common.Header.module_name)
  return module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_module_name() {
  // @@protoc_insertion_point(field_release:usv.common.Header.module_name)
  clear_has_module_name();
  return module_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_module_name(::std::string* module_name) {
  if (module_name != NULL) {
    set_has_module_name();
  } else {
    clear_has_module_name();
  }
  module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_name);
  // @@protoc_insertion_point(field_set_allocated:usv.common.Header.module_name)
}

// optional uint32 sequence_num = 3;
bool Header::has_sequence_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Header::set_has_sequence_num() {
  _has_bits_[0] |= 0x00000080u;
}
void Header::clear_has_sequence_num() {
  _has_bits_[0] &= ~0x00000080u;
}
void Header::clear_sequence_num() {
  sequence_num_ = 0u;
  clear_has_sequence_num();
}
::google::protobuf::uint32 Header::sequence_num() const {
  // @@protoc_insertion_point(field_get:usv.common.Header.sequence_num)
  return sequence_num_;
}
void Header::set_sequence_num(::google::protobuf::uint32 value) {
  set_has_sequence_num();
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:usv.common.Header.sequence_num)
}

// optional uint64 lidar_timestamp = 4;
bool Header::has_lidar_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Header::set_has_lidar_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void Header::clear_has_lidar_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void Header::clear_lidar_timestamp() {
  lidar_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_lidar_timestamp();
}
::google::protobuf::uint64 Header::lidar_timestamp() const {
  // @@protoc_insertion_point(field_get:usv.common.Header.lidar_timestamp)
  return lidar_timestamp_;
}
void Header::set_lidar_timestamp(::google::protobuf::uint64 value) {
  set_has_lidar_timestamp();
  lidar_timestamp_ = value;
  // @@protoc_insertion_point(field_set:usv.common.Header.lidar_timestamp)
}

// optional uint64 camera_timestamp = 5;
bool Header::has_camera_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Header::set_has_camera_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void Header::clear_has_camera_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void Header::clear_camera_timestamp() {
  camera_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_camera_timestamp();
}
::google::protobuf::uint64 Header::camera_timestamp() const {
  // @@protoc_insertion_point(field_get:usv.common.Header.camera_timestamp)
  return camera_timestamp_;
}
void Header::set_camera_timestamp(::google::protobuf::uint64 value) {
  set_has_camera_timestamp();
  camera_timestamp_ = value;
  // @@protoc_insertion_point(field_set:usv.common.Header.camera_timestamp)
}

// optional uint64 radar_timestamp = 6;
bool Header::has_radar_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Header::set_has_radar_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void Header::clear_has_radar_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void Header::clear_radar_timestamp() {
  radar_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_radar_timestamp();
}
::google::protobuf::uint64 Header::radar_timestamp() const {
  // @@protoc_insertion_point(field_get:usv.common.Header.radar_timestamp)
  return radar_timestamp_;
}
void Header::set_radar_timestamp(::google::protobuf::uint64 value) {
  set_has_radar_timestamp();
  radar_timestamp_ = value;
  // @@protoc_insertion_point(field_set:usv.common.Header.radar_timestamp)
}

// optional uint32 version = 7 [default = 1];
bool Header::has_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Header::set_has_version() {
  _has_bits_[0] |= 0x00000100u;
}
void Header::clear_has_version() {
  _has_bits_[0] &= ~0x00000100u;
}
void Header::clear_version() {
  version_ = 1u;
  clear_has_version();
}
::google::protobuf::uint32 Header::version() const {
  // @@protoc_insertion_point(field_get:usv.common.Header.version)
  return version_;
}
void Header::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:usv.common.Header.version)
}

// optional .usv.common.StatusPb status = 8;
bool Header::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Header::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void Header::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void Header::clear_status() {
  if (status_ != NULL) status_->::usv::common::StatusPb::Clear();
  clear_has_status();
}
const ::usv::common::StatusPb& Header::status() const {
  const ::usv::common::StatusPb* p = status_;
  // @@protoc_insertion_point(field_get:usv.common.Header.status)
  return p != NULL ? *p : *reinterpret_cast<const ::usv::common::StatusPb*>(
      &::usv::common::_StatusPb_default_instance_);
}
::usv::common::StatusPb* Header::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::usv::common::StatusPb;
  }
  // @@protoc_insertion_point(field_mutable:usv.common.Header.status)
  return status_;
}
::usv::common::StatusPb* Header::release_status() {
  // @@protoc_insertion_point(field_release:usv.common.Header.status)
  clear_has_status();
  ::usv::common::StatusPb* temp = status_;
  status_ = NULL;
  return temp;
}
void Header::set_allocated_status(::usv::common::StatusPb* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:usv.common.Header.status)
}

// optional string frame_id = 9;
bool Header::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Header::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Header::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Header::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
const ::std::string& Header::frame_id() const {
  // @@protoc_insertion_point(field_get:usv.common.Header.frame_id)
  return frame_id_.GetNoArena();
}
void Header::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:usv.common.Header.frame_id)
}
#if LANG_CXX11
void Header::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:usv.common.Header.frame_id)
}
#endif
void Header::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:usv.common.Header.frame_id)
}
void Header::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:usv.common.Header.frame_id)
}
::std::string* Header::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:usv.common.Header.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_frame_id() {
  // @@protoc_insertion_point(field_release:usv.common.Header.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:usv.common.Header.frame_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace usv

// @@protoc_insertion_point(global_scope)
